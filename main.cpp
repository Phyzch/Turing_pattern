# include<iostream>
# include <math.h>
#include<fstream>
#include <sstream>
#include"Brusselator.h"
#include<time.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <experimental/filesystem>
using namespace std;
namespace fs= std::experimental::filesystem;

int main() {
    int i; // i means the file number, we cam generate many files simulated using different parameters or same parameters
	double timestep = 1;  //timestep for outputting result, set to 1 means we output concentration every 1 seconds
	bool load = true; // bool variable, if set to true, the programme will load information from save_data.txt and continue simulation. If load==false, it will delete all information and results and restart.
	//ifstream sample;
	char c;
	int Filenumber = 1;
	auto parent_path= "/home/phyzch/CLionProjects/fixed_position_Turing_pattern/save_data/change_particle_number/rescaled_parameter/k12=0.5/0.1/V=11/";
//	if (fs::is_directory(parent_path)){
//	    ;// parent path exists
//    }
//	else{ // create parent path.
//	    mkdir(parent_path, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
//	}
	for (i = 1; i <= Filenumber; i++) {
		//sample.open("./save_data/sampling/samplingparameter.txt"); // if stream sampling and sample are used to simulate randomly sampled parameters generated by Latin hypercube sampling (See Python file) stored in ./save_data/sampling/sampling_parameter.txt
		double * sampling = new double[2];
		//sample >> sampling[0];
		//sample >> c;
		//sample >> sampling[1];
		//sample >> c;                  // uncomment above lines about sampling if you want to sampling from random parameters 
		long timee = time(NULL);
		stringstream ss;
		string ch;
		ss << i;
		ss >> ch;
		string path = parent_path+ch;   // path_name, ch is the char form of number: "1","2","3",etc. Our result will be stored in these files.
        // check directory exists or not
		struct stat statbuf;
        int isDir = 0;
        if (stat(path.c_str(), &statbuf) != -1) {  // get permission to access directory
            if (S_ISDIR(statbuf.st_mode)) {
                isDir = 1;
            }
        }
        if (isDir==1){
            ;  // directory already exists
        }
        else {// create directory
            if (!mkdir(path.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH)) {
                printf("File created!");
            } else {
                printf("Fail to create the file, directory may not exist.");
                exit(-1);
            }
        }

		Brusselator_reaction_system System(path, load, timestep, i, sampling);
		System.System_evolve();
	}
}